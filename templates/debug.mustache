<!DOCTYPE html>
<html>
	<head>
		<!-- Meta -->
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
		<title>Local debugger with server data</title>
		<link href="favicon.ico?" rel="shortcut icon" type="image/x-icon">
		
		<!-- Stylesheets -->
		<link href="fontello/css/fontello.css" rel="stylesheet">
		<style>
			body {
				margin:0;
				overflow:hidden;
			}
		</style>

	</head>
	<body>
		<script src="../debug/cannon.js"></script>
		<script src="../debug/cannon.demo.js"></script>
		<script src="../threejs/three.js"></script>
		<script src="../threejs/OrbitControls.js"></script>
		<script src="libs/dat.gui.js"></script>
		<script src="libs/Three.js"></script>
		<script src="libs/TrackballControls.js"></script>
		<script src="libs/Detector.js"></script>
		<script src="libs/Stats.js"></script>
		<script src="libs/smoothie.js"></script>
		<script>

        var demo = new CANNON.Demo();

        demo.addScene("Heightfield", function () {

            // Init world
            var world = demo.getWorld();
            world.gravity.set(0, 0, -10);
            world.broadphase = new CANNON.NaiveBroadphase();

            var map = {{{map}}}
			console.log(map);

            // Create the heightfield
			/* matrix = matrix.slice(0,16);
			for(i=0;i<matrix.length;i++){
				matrix[i] = matrix[i].slice(0,16);
			} */

			let model = map.models[0];
			let vertices = vertexObjectArrayToFloat32Array(model.vertices);
			let normals = vertexObjectArrayToFloat32Array(model.vertexNormals);
			let indices = [];
			for (let index of model.faces){
				indices.push(
					index.vertices[0].vertexIndex,
					index.vertices[1].vertexIndex,
					index.vertices[2].vertexIndex
				);
			}
			
			indices.reverse();
			
            var triShape = new CANNON.Trimesh(vertices,indices);
            var triBody = new CANNON.Body({ mass: 0 });
            triBody.addShape(triShape);
            triBody.quaternion.setFromEuler(Math.PI*.5,-Math.PI*.5,0);
            world.addBody(triBody);
            demo.addVisual(triBody);

            var sizeX = 15,
                sizeY = 15;
				
            // Add spheres
            var mass = 1;
            for(var i=0; i<sizeX - 1; i++){
                for (var j = 0; j < sizeY - 1; j++) {
                    if(i===0 || i >= sizeX-2 || j===0 || j >= sizeY-2)
                        continue;
                    var sphereShape = new CANNON.Box(new CANNON.Vec3(.15,.15,.15));
                    var sphereBody = new CANNON.Body({ mass: mass });
                    sphereBody.addShape(sphereShape);
                    sphereBody.position.set(.25 + i, .25 + j, 5);
                    sphereBody.position.vadd(triBody.position, sphereBody.position);
                    world.addBody(sphereBody);
                    demo.addVisual(sphereBody);
                }
            }
			
			var boxShape = new CANNON.Box(new CANNON.Vec3(20,.2,.2));
            var boxBody = new CANNON.Body({ mass: 0 });
            boxBody.addShape(boxShape);
			boxBody.position.set(0,0,0);
			boxBody.position.vadd(triBody.position, boxBody.position);
            world.addBody(boxBody);
            demo.addVisual(boxBody);
			
			boxShape = new CANNON.Box(new CANNON.Vec3(.2,20,.2));
            boxBody = new CANNON.Body({ mass: 0 });
            boxBody.addShape(boxShape);
			boxBody.position.set(0,0,0);
			boxBody.position.vadd(triBody.position, boxBody.position);
            world.addBody(boxBody);
            demo.addVisual(boxBody);
			
			boxShape = new CANNON.Box(new CANNON.Vec3(.2,.2,20));
            boxBody = new CANNON.Body({ mass: 0 });
            boxBody.addShape(boxShape);
			boxBody.position.set(0,0,0);
			boxBody.position.vadd(triBody.position, boxBody.position);
            world.addBody(boxBody);
            demo.addVisual(boxBody);
        });

      demo.start();

		function vertexObjectArrayToFloat32Array(array){ // Also converts z up to y up
			
			// indexing expects vertices starting at 1, so we add a 0,0,0 vertex at the start to solve this
			let f32array = new Float32Array(array.length*3 + 3);
			let i = 1;
			
			for (let vertex of array){
				f32array[i*3+0] = vertex.x;
				f32array[i*3+1] = vertex.z;
				f32array[i*3+2] = vertex.y;
				i++;
			}
			return f32array;
		}

    </script>
	</body>
</html>