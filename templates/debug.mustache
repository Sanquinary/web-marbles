<!DOCTYPE html>
<html>
	<head>
		<!-- Meta -->
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
		<title>Local debugger with server data</title>
		<link href="favicon.ico?" rel="shortcut icon" type="image/x-icon">
		
		<!-- Stylesheets -->
		<link href="fontello/css/fontello.css" rel="stylesheet">
		<style>
			body {
				margin:0;
				overflow:hidden;
			}
		</style>

	</head>
	<body>
		<script src="../debug/cannon.js"></script>
		<script src="../debug/cannon.demo.js"></script>
		<script src="../threejs/three.js"></script>
		<script src="../threejs/OrbitControls.js"></script>
		<script src="libs/dat.gui.js"></script>
		<script src="libs/Three.js"></script>
		<script src="libs/TrackballControls.js"></script>
		<script src="libs/Detector.js"></script>
		<script src="libs/Stats.js"></script>
		<script src="libs/smoothie.js"></script>
		<script>

        var demo = new CANNON.Demo();

        demo.addScene("Heightfield", function () {

            // Init world
            var world = demo.getWorld();
            world.gravity.set(0, 0, -10);
            world.broadphase = new CANNON.NaiveBroadphase();

            // Create a matrix of height values
            var matrix = {{{vertices}}};
            var sizeX = 15,
                sizeY = 15;

            // Create the heightfield
			/* for (arr of matrix){
				arr.reverse();
			}
			matrix.reverse(); */
			
            var hfShape = new CANNON.Heightfield(matrix, {
                elementSize: 1
            });
            var hfBody = new CANNON.Body({ mass: 0 });
            hfBody.addShape(hfShape);
            hfBody.position.set(-sizeX * hfShape.elementSize / 2, -20, -10);
            world.addBody(hfBody);
            demo.addVisual(hfBody);

            // Add spheres
            var mass = 1;
            for(var i=0; i<sizeX - 1; i++){
                for (var j = 0; j < sizeY - 1; j++) {
                    if(i===0 || i >= sizeX-2 || j===0 || j >= sizeY-2)
                        continue;
                    var sphereShape = new CANNON.Box(new CANNON.Vec3(.15,.15,.15));
                    var sphereBody = new CANNON.Body({ mass: mass });
                    sphereBody.addShape(sphereShape);
                    sphereBody.position.set(.25 + i, .25 + j, 1);
                    sphereBody.position.vadd(hfBody.position, sphereBody.position);
                    world.addBody(sphereBody);
                    demo.addVisual(sphereBody);
                }
            }
			
			var boxShape = new CANNON.Box(new CANNON.Vec3(20,.2,.2));
            var boxBody = new CANNON.Body({ mass: 0 });
            boxBody.addShape(boxShape);
			boxBody.position.set(0,0,0);
			boxBody.position.vadd(hfBody.position, boxBody.position);
            world.addBody(boxBody);
            demo.addVisual(boxBody);
			
			boxShape = new CANNON.Box(new CANNON.Vec3(.2,20,.2));
            boxBody = new CANNON.Body({ mass: 0 });
            boxBody.addShape(boxShape);
			boxBody.position.set(0,0,0);
			boxBody.position.vadd(hfBody.position, boxBody.position);
            world.addBody(boxBody);
            demo.addVisual(boxBody);
			
			boxShape = new CANNON.Box(new CANNON.Vec3(.2,.2,20));
            boxBody = new CANNON.Body({ mass: 0 });
            boxBody.addShape(boxShape);
			boxBody.position.set(0,0,0);
			boxBody.position.vadd(hfBody.position, boxBody.position);
            world.addBody(boxBody);
            demo.addVisual(boxBody);
        });

      demo.start();

    </script>
	</body>
</html>